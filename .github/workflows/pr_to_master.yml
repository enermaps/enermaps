# This is a basic workflow to help you get started with Actions

name: PR precheck

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  lint:
    # The type of runner that the job will run on
    runs-on: 'ubuntu-18.04'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - run: |
          # Hack to get setup-python to work on act
          if [ ! -f "/etc/lsb-release" ] ; then
            echo "DISTRIB_RELEASE=18.04" > /etc/lsb-release
          fi
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: install linters
        run: pip install -r api/linter-requirements.txt

      - name: check-lint with black
        run: cd api && black --diff --check .
      - name: check-lint with bandit
        run: cd api && bandit -r .
      - name: check-lint with isort
        run: cd api && isort --check --diff .
      - name: check-lint with flake8
        run: cd api && flake8 **/*py

      - name: check-lint cms
        run: cd cm && ./.check_cm.sh

      - name: install dependencies for the frontend
        run: cd frontend/src && npm install .
      - name: check-lint the frontend
        run: cd frontend/src && npx eslint .

      - name: ensure all setup.cfg are the same
        run: find . -name setup.cfg -exec sha256sum {} \; | cut -d ' ' -f 1 | uniq -u | test -z

  verify-licenses:
    # The type of runner that the job will run on
    runs-on: 'ubuntu-18.04'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: install liccheck
        run: find . -name requirements.txt -print -exec pip install -r {} \; -exec liccheck -s .liccheck.ini -r {} \;
      - name: verify python licenses
        run: find . -name setup.cfg -exec sha256sum {} \; | cut -d ' ' -f 1 | uniq -u | test -z
      - name: verify npm license
        run: npx license-checker --onlyAllow MIT\;BSD-3-Clause\;ISC\;Apache-2.0\;BSD-2-Clause\;Public\ Domain\;AFLV2,BSD\;AFLv2.1\;WTFPL\;Custom:\ https://rollupjs.org\;Unlicense\;
  build-stack:
    runs-on: 'ubuntu-18.04'
    steps:
      - uses: actions/checkout@v2
      - name: Create an empty env file for variables that should be kept only locally (e.g. secret keys)
        run: touch .env-local
      - name: Run docker-compose stack
        run: docker-compose build --parallel
